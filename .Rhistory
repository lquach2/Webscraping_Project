addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
library(maps)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addProviderTiles("Esri.WorldStreetMap")
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addProviderTiles("Stamen.Watercolor")
leaflet_andrew
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet(Andrew) %>%
addProviderTiles("Esri.WorldStreetMap") %>%
addPolylines(~Long, ~Lat)
})
}
shinyApp(ui, server)
library(shiny)
library(maps)
library(shiny)
library(leaflet)
library(googleVis)
library(maps)
runApp('~/Desktop/LeafletDemo')
runApp('~/Desktop/LeafletDemo')
runApp('~/Desktop/LeafletDemo')
install.packages("shinydashboard")
runApp('~/Desktop/dashboardDemo')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/dashboardDemo')
state.x77
str(state.x77)
dim(state.x77)
# convert matrix to dataframe
state_stat <- data.frame(state.name = rownames(state.x77), state.x77)
# remove row names
rownames(state_stat) <- NULL
# create variable with colnames as choice
choice <- colnames(state_stat)[-1] #-1 to get rid of state name
state_stat
choice
runApp('~/Desktop/dashboardDemo')
devtools::install_github('rstudio/DT')
runApp('~/Desktop/dashboardDemo')
library(googleVis)
runApp('~/Desktop/dashboardDemo')
library(DT)
runApp('~/Desktop/dashboardDemo')
runApp('~/Desktop/dashboardDemo')
library(readr)
dataset <- read_csv(NULL)
View(dataset)
wd
data.csv <- read.csv(file="data.csv", header=TRUE, sep=",")
head(data)
data <- read.csv(file="data.csv", header=TRUE)
data <- read.csv(file="data.csv", header=TRUE)
head(data)
data(faithful)
library(dplyr)
library(ggplot2)
#1
x <- faithful$eruptions
length <- faithful %>%
mutate(x = ifelse(x<3.2, "short","long"))
#2
ggplot(data = length, aes(x = x, y = waiting)) +
geom_point() +
geom_boxplot()
#3
ggplot(data = length, aes(x = waiting)) + geom_density(aes(color = x))
#4 The boxplot gives you a better understanding of the average waiting time and how spread out the values are. The density plot allows you to visualize the frequency of waiting time for each variable, length. Both plots tells you the distribution
# Question 2
data(faithful)
# 2.1
faithful$length = ifelse(faithful$eruptions < 3.2,
"short", "long")
faithful$length = as.factor(faithful$length)
class(faithful$length)
# 2.2
ggplot(faithful, aes(x = length, y = waiting)) +
geom_boxplot()
# 2.3
ggplot(faithful, aes(x = waiting))+
geom_density(aes(color = length))
# 2.4
# It seems that shorter wait times correspond to shorter eruption times
# Maybe if there is less waiting time, there is less build up, # and thus the eruption is shorter.
# Question 3
library(dplyr)
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
knicks <- tbl_df(data)
# 3.1
knicks1 <- group_by(knicks, season) %>%
summarise(ratio=sum(win=="W")/n())
ggplot(knicks1, aes(x=season, y=ratio)) + geom_bar(stat="identity")
# 3.2
knicks2 <- group_by(knicks, season, visiting) %>%
summarise(ratio=sum(win=="W")/n())
ggplot(knicks2, aes(x=season,y=ratio)) +
geom_bar(aes(fill=visiting), stat='identity',position='dodge')
# 3.3
ggplot(knicks,aes(x=points)) +
geom_histogram()+
facet_wrap(~season)
#### Difference between facet_wrap and facet_grid
#### https://www3.nd.edu/~steve/computing_with_data/13_Facets/facets.html
# 3.4
knicks3 <- group_by(knicks, opponent) %>%
summarise(ratio=sum(win=="W")/n(), diff=mean(points-opp))
ggplot(knicks3,aes(x=diff, y=ratio)) +
geom_point(color='red4',size=4)+
geom_hline(yintercept=0.5,colour='grey20',size=0.5,linetype=2)+
geom_vline(xintercept=0,colour='grey20',size=0.5,linetype=2)+
geom_text(aes(x=diff,y=ratio,label=opponent),
hjust=0.7, vjust=1.4,angle = -30)+
theme_bw()
# The plot shows that the more favorable the point differece, the higher the  win ratio, which sounds reasonable
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
#1
data2 <- data %>%
mutate(., ratio = points/opp)
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_point() +
geom_boxplot()
g
#2 home and away winning
data3 <- data2 %>%
filter(., ratio >= 1)
g2 = ggplot(data = data3,aes(x =season)) + geom_bar(aes(fill=visiting))
g2
#3
data4 <- data %>%
group_by(., season) %>%
summarise(., avgPoints = mean(points))
g3 = ggplot(data = data4, aes(x=avgPoints, fill=season)) +
geom_histogram()
g3
data5 <- data %>%
mutate(., ratio = points/opp) %>%
filter(., ratio >= 1) %>%
group_by(., season) %>%
summarise(., avgRatio = mean(ratio), avgDiff = mean(abs(points-opp)))
g4 = ggplot(data=data5, aes(x=avgRatio, y=avgDiff)) +
geom_point() + geom_smooth(method="lm")
g4
#linear relationship between average winning ratio and average point difference.
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
#1
data2 <- data %>%
mutate(., ratio = points/opp)
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_point() +
geom_bar(stat="identity")
g
#2 home and away winning
data3 <- data2 %>%
filter(., ratio >= 1)
g2 = ggplot(data = data3,aes(x =season)) + geom_bar(aes(fill=visiting))
g2
#3
data4 <- data %>%
group_by(., season) %>%
summarise(., avgPoints = mean(points))
g3 = ggplot(data = data4, aes(x=avgPoints, fill=season)) +
geom_histogram()
g3
data5 <- data %>%
mutate(., ratio = points/opp) %>%
filter(., ratio >= 1) %>%
group_by(., season) %>%
summarise(., avgRatio = mean(ratio), avgDiff = mean(abs(points-opp)))
g4 = ggplot(data=data5, aes(x=avgRatio, y=avgDiff)) +
geom_point() + geom_smooth(method="lm")
g4
#linear relationship between average winning ratio and average point difference.
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
#1
data2 <- data %>%
mutate(., ratio = points/opp)
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_point() +
geom_bar(stat="identity")
g
#2 home and away winning
data3 <- data2 %>%
filter(., ratio >= 1)
g2 = ggplot(data = data3,aes(x =season)) + geom_bar(aes(fill=visiting))
g2
#3
data4 <- data %>%
group_by(., season) %>%
summarise(., avgPoints = mean(points))
g3 = ggplot(data = data4, aes(x=avgPoints, fill=season)) +
geom_histogram()
g3
data5 <- data %>%
mutate(., ratio = points/opp) %>%
filter(., ratio >= 1) %>%
group_by(., season) %>%
summarise(., avgRatio = mean(ratio), avgDiff = mean(abs(points-opp)))
g4 = ggplot(data=data5, aes(x=avgRatio, y=avgDiff)) +
geom_point() + geom_smooth(method="lm")
g4
#linear relationship between average winning ratio and average point difference.
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
#1
data2 <- data %>%
mutate(., ratio = points/opp)
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity")
g
#2 home and away winning
data3 <- data2 %>%
filter(., ratio >= 1)
g2 = ggplot(data = data3,aes(x =season)) + geom_bar(aes(fill=visiting))
g2
#3
data4 <- data %>%
group_by(., season) %>%
summarise(., avgPoints = mean(points))
g3 = ggplot(data = data4, aes(x=avgPoints, fill=season)) +
geom_histogram()
g3
data5 <- data %>%
mutate(., ratio = points/opp) %>%
filter(., ratio >= 1) %>%
group_by(., season) %>%
summarise(., avgRatio = mean(ratio), avgDiff = mean(abs(points-opp)))
g4 = ggplot(data=data5, aes(x=avgRatio, y=avgDiff)) +
geom_point() + geom_smooth(method="lm")
g4
#linear relationship between average winning ratio and average point difference.
data2 <- data %>%
mutate(ratio = points/opp)
data2
data2 <- data %>%
mutate(ratio = points/opp)
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity")
g
g
ratio
data2 <- data %>%
mutate(ratio = points/opp)
data2
g = ggplot(data = data2, aes(x = season, y = ratio))
g
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar()
g
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity")
g
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="count")
g
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="ratio")
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar()
g
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar()
g
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity"
g
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity")
g
g
g = ggplot(data = data2, aes(x = season, y = ratio))
g
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
#1
data2 <- data %>%
mutate(ratio = points/opp)
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity")
g
#2 home and away winning
data3 <- data2 %>%
filter(., ratio >= 1)
g2 = ggplot(data = data3,aes(x =season)) + geom_bar(aes(fill=visiting))
g2
#3
data4 <- data %>%
group_by(., season) %>%
summarise(., avgPoints = mean(points))
g3 = ggplot(data = data4, aes(x=avgPoints, fill=season)) +
geom_histogram() + facet_wrap(~season)
g3
data5 <- data %>%
mutate(., ratio = points/opp) %>%
filter(., ratio >= 1) %>%
group_by(., season) %>%
summarise(., avgRatio = mean(ratio), avgDiff = mean(abs(points-opp)))
g4 = ggplot(data=data5, aes(x=avgRatio, y=avgDiff)) +
geom_point() + geom_smooth(method="lm")
g4
#linear relationship between average winning ratio and average point difference.
g3
g3 = ggplot(knicks,aes(x=points)) +
geom_histogram()+
facet_wrap(~season)
g3
data2 <- data %>%
mutate(ratio=sum(win=="W")/n())
g = ggplot(data = data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity")
g
g
data2 <- data %>%
mutate(ratio = sum(points/opp))
data2
head(data2)
data2 <- data %>%
mutate(ratio = points/opp)
data2
head(data2)
g = ggplot(data2, aes(x = season, y = ratio)) +
geom_bar(stat="identity")
g
g
data2 <- data %>%
mutate(ratio = points/opp)
ggplot(data2, aes(x = season, y = ratio)) + geom_bar(stat="identity")
g = ggplot(data2, aes(x = season, y = ratio)) + geom_bar(stat="identity")
g
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
#1
data2 <- data %>%
mutate(ratio = points/opp)
g = ggplot(data2, aes(x = season, y = ratio)) + geom_bar(stat="identity")
g
#2 home and away winning
data3 <- data2 %>%
filter(., ratio >= 1)
g2 = ggplot(data = data3,aes(x =season)) + geom_bar(aes(fill=visiting))
g2
#3
g3 = ggplot(knicks,aes(x=points)) +
geom_histogram()+
facet_wrap(~season)
data5 <- data %>%
mutate(., ratio = points/opp) %>%
filter(., ratio >= 1) %>%
group_by(., season) %>%
summarise(., avgRatio = mean(ratio), avgDiff = mean(abs(points-opp)))
g4 = ggplot(data=data5, aes(x=avgRatio, y=avgDiff)) +
geom_point() + geom_smooth(method="lm")
g4
#linear relationship between average winning ratio and average point difference.
seq()
seq(1,10)
my_variable <- 10
my_variable
install.packages("wordcloud")
library(wordcloud)
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(wordcloud)
library(RColorBrewer)
install.packages("wordcloud")
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
install.packages("wordcloud2")
install.pacakges("tm")
install.packages("tm")
setwd("~/Desktop/realtor")
csv_files <- list.files(pattern = ".csv")
description <- realtor$description
realtor <- read.csv('./realtor_sf.csv')
description <- realtor$description
docs <- Corpus(VectorSource(description))
library(tm)
docs <- Corpus(VectorSource(description))
docs
gsub("[[:punct::]]", "", realtor$description)
gsub("[[:punct:]]", "", realtor$description)
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
dtm
set.seed(1234)
wordcloud(words = df$word, freq = df$freq, min.freq=1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
warnings()
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
library(dplyr)
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix), decreasing = TRUE)
df <- data.frame(word = names(words),)
description <- realtor$description
docs <- Corpus(VectorSource(description))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
description <- realtor$description
docs <- Corpus(VectorSource(description))
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs
description <- realtor$description
docs <- Corpus(VectorSource(description))
#gsub("[[:punct:]]", "", realtor$description)
docs <- docs %>%
tm_map(removeNumbers) %>%
tm_map(removePunctuation) %>%
tm_map(stripWhitespace)
docs <- tm_map(docs, content_transformer(tolower))
docs <- tm_map(docs, removeWords, stopwords("english"))
dtm <- TermDocumentMatrix(docs)
matrix <- as.matrix(dtm)
words <- sort(rowSums(matrix), decreasing = TRUE)
df <- data.frame(word = names(words), freq=words)
wordcloud(words = df$word, freq = df$freq, min.freq=1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud2(data=df, size=1.6, color='random-dark')
library(wordcloud2)
wordcloud2(data=df, size=1.6, color='random-dark')
wordcloud2(data=df, size=1, color='random-dark')
wordcloud2(data=df, size=0.5, color='random-dark')
wordcloud2(data=df, size=0.25, color='random-dark')
shiny::runApp('realtor_shiny')
runApp('realtor_shiny')
wordcloud_rep <- repeatable(wordcloud2)
output$wordcloud <- renderPlot(
workcloud_rep
)
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
wordcloud_rep <- repeatable(wordcloud2)
wordcloud_rep
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
realtor_garages <- realtor$garage_space
realtor_garages
realtor_garages <- realtor_$garage_space
realtor_garages <- realtor_ %>%
select(., garage_space, year_built, area, price, sqft)
csv_files <- list.files(pattern = ".csv")
realtor <- read.csv('./realtor_sf.csv')
realtor$price <- as.numeric(as.character(realtor$price))
realtor$zip <- as.character(as.numeric(realtor$zip))
realtor$city <- as.character(as.factor(realtor$city))
realtor$state <- as.character(as.factor(realtor$state))
realtor_ <- na.omit(realtor)
realtor_garages <- realtor_ %>%
select(., garage_space, year_built, area, price, sqft)
realtor_garages
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
realtor$taxes_2015
runApp('realtor_shiny')
runApp('realtor_shiny')
runApp('realtor_shiny')
